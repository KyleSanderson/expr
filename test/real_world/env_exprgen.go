// Code generated by exprgen. DO NOT EDIT.

package real_world

import (
	fmt "fmt"
)

func toInt(a interface{}) int {
	switch x := a.(type) {
	case float32:
		return int(x)
	case float64:
		return int(x)

	case int:
		return x
	case int8:
		return int(x)
	case int16:
		return int(x)
	case int32:
		return int(x)
	case int64:
		return int(x)

	case uint:
		return int(x)
	case uint8:
		return int(x)
	case uint16:
		return int(x)
	case uint32:
		return int(x)
	case uint64:
		return int(x)

	default:
		panic(fmt.Sprintf("invalid operation: int(%T)", x))
	}
}

func (v DirectFlightsDays) Fetch(i interface{}) interface{} {
	var string_i string
	if s, ok := i.(string); ok {
		string_i = s
	} else {
		string_i = fmt.Sprint(i)
	}
	switch string_i {
	case "Days":
		return v.Days
	case "Start":
		return v.Start
	}
	return nil
}
func (v Env) Fetch(i interface{}) interface{} {
	var string_i string
	if s, ok := i.(string); ok {
		string_i = s
	} else {
		string_i = fmt.Sprint(i)
	}
	switch string_i {
	case "AppVersion":
		return v.SearchParamsEnv.AppVersion
	case "CleanMarker":
		return v.SearchParamsEnv.CleanMarker
	case "CountryCode":
		return v.SearchParamsEnv.CountryCode
	case "CurrencyCode":
		return v.SearchParamsEnv.CurrencyCode
	case "DestinationCountry":
		return v.SearchParamsEnv.DestinationCountry
	case "Features":
		return v.SearchParamsEnv.Features
	case "GateID":
		return v.SearchParamsEnv.GateID
	case "InitializedAt":
		return v.SearchParamsEnv.InitializedAt
	case "IsAffiliate":
		return v.SearchParamsEnv.IsAffiliate
	case "IsDesktop":
		return v.SearchParamsEnv.IsDesktop
	case "IsMobile":
		return v.SearchParamsEnv.IsMobile
	case "IsOpenJaw":
		return v.SearchParamsEnv.IsOpenJaw
	case "KnowEnglish":
		return v.SearchParamsEnv.KnowEnglish
	case "Locale":
		return v.SearchParamsEnv.Locale
	case "Marker":
		return v.SearchParamsEnv.Marker
	case "Market":
		return v.SearchParamsEnv.Market
	case "OriginCountry":
		return v.SearchParamsEnv.OriginCountry
	case "Os":
		return v.SearchParamsEnv.Os
	case "OsVersion":
		return v.SearchParamsEnv.OsVersion
	case "Passengers":
		return v.SearchParamsEnv.Passengers
	case "Random":
		return v.SearchParamsEnv.Random
	case "ReferrerHost":
		return v.SearchParamsEnv.ReferrerHost
	case "SearchDepth":
		return v.SearchParamsEnv.SearchDepth
	case "SearchParamsEnv":
		return v.SearchParamsEnv
	case "Segments":
		return v.SearchParamsEnv.Segments
	case "TravelPayoutsAPI":
		return v.SearchParamsEnv.TravelPayoutsAPI
	case "TripClass":
		return v.SearchParamsEnv.TripClass
	case "UserAgentDevice":
		return v.SearchParamsEnv.UserAgentDevice
	case "UserAgentType":
		return v.SearchParamsEnv.UserAgentType
	case "UserIP":
		return v.SearchParamsEnv.UserIP
	}
	return nil
}
func (v Passengers) Fetch(i interface{}) interface{} {
	var string_i string
	if s, ok := i.(string); ok {
		string_i = s
	} else {
		string_i = fmt.Sprint(i)
	}
	switch string_i {
	case "Adults":
		return v.Adults
	case "Children":
		return v.Children
	case "Infants":
		return v.Infants
	}
	return nil
}
func (v RouteSegment) Fetch(i interface{}) interface{} {
	var string_i string
	if s, ok := i.(string); ok {
		string_i = s
	} else {
		string_i = fmt.Sprint(i)
	}
	switch string_i {
	case "Date":
		return v.Date
	case "Destination":
		return v.Destination
	case "DestinationCountry":
		return v.DestinationCountry
	case "DestinationName":
		return v.DestinationName
	case "DirectFlightsDays":
		return v.DirectFlightsDays
	case "Origin":
		return v.Origin
	case "OriginCountry":
		return v.OriginCountry
	case "OriginName":
		return v.OriginName
	case "TranslatedDestination":
		return v.TranslatedDestination
	case "TranslatedOrigin":
		return v.TranslatedOrigin
	case "UserDestination":
		return v.UserDestination
	case "UserOrigin":
		return v.UserOrigin
	}
	return nil
}
func (v SearchParamsEnv) Fetch(i interface{}) interface{} {
	var string_i string
	if s, ok := i.(string); ok {
		string_i = s
	} else {
		string_i = fmt.Sprint(i)
	}
	switch string_i {
	case "AppVersion":
		return v.AppVersion
	case "CleanMarker":
		return v.CleanMarker
	case "CountryCode":
		return v.CountryCode
	case "CurrencyCode":
		return v.CurrencyCode
	case "DestinationCountry":
		return v.DestinationCountry
	case "Features":
		return v.Features
	case "GateID":
		return v.GateID
	case "InitializedAt":
		return v.InitializedAt
	case "IsAffiliate":
		return v.IsAffiliate
	case "IsDesktop":
		return v.IsDesktop
	case "IsMobile":
		return v.IsMobile
	case "IsOpenJaw":
		return v.IsOpenJaw
	case "KnowEnglish":
		return v.KnowEnglish
	case "Locale":
		return v.Locale
	case "Marker":
		return v.Marker
	case "Market":
		return v.Market
	case "OriginCountry":
		return v.OriginCountry
	case "Os":
		return v.Os
	case "OsVersion":
		return v.OsVersion
	case "Passengers":
		return v.Passengers
	case "Random":
		return v.Random
	case "ReferrerHost":
		return v.ReferrerHost
	case "SearchDepth":
		return v.SearchDepth
	case "Segments":
		return v.Segments
	case "TravelPayoutsAPI":
		return v.TravelPayoutsAPI
	case "TripClass":
		return v.TripClass
	case "UserAgentDevice":
		return v.UserAgentDevice
	case "UserAgentType":
		return v.UserAgentType
	case "UserIP":
		return v.UserIP
	}
	return nil
}
func (v UserAgentFeatures) Fetch(i interface{}) interface{} {
	var string_i string
	if s, ok := i.(string); ok {
		string_i = s
	} else {
		string_i = fmt.Sprint(i)
	}
	switch string_i {
	case "Assisted":
		return v.Assisted
	case "TopPlacement":
		return v.TopPlacement
	case "TourTickets":
		return v.TourTickets
	}
	return nil
}
